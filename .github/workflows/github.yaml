name: Build Docker Image
on:
# Triggers the workflow on push request events but only for the devops branch
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - KAN-1-Issue1
  # push:
  #   branches:
  #     - devops
env:
  testPath: test
jobs:
# This workflow contains multiple jobs
 Build:
  name: BuildApp
# The type of runner that the job will run on
  #runs-on: ubuntu-latest
  runs-on: windows-latest
  steps:
  # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
   - name: Checkout Repository
     uses: actions/checkout@v3
       
   - name: Setup .Net core
     uses: actions/setup-dotnet@v3
     with:
       dotnet-version: '8.0'

   
   - name: Set up JDK 17
     uses: actions/setup-java@v2
     with:
        java-version: '17'
        distribution: 'adopt'

   - name: sonar setup
     run: | 
       dotnet tool install --global dotnet-sonarscanner  
       dotnet tool install --global dotnet-coverage
       dotnet tool install -g dotnet-reportgenerator-globaltool

   - name: sonar scan begin
     run: dotnet sonarscanner begin /k:"S-gallaxy_hello-world" /o:"s-gallaxy" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token=${{ secrets.SONAR_TOKEN }} /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml

   - name: build
     run: dotnet build --configuration Release

   - name: test
     run: |
       dotnet-coverage collect -f xml -o coverage.xml dotnet test $testPath
       reportgenerator -reports:coverage.xml -targetdir:.\report

   - name: Upload test results
     uses: actions/upload-artifact@v4
     with:
        name: hello-world
        path: .report/index.html
   
   - name: sonar scan end
     run: dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}


   - name: Print custom short Sha ID image tag
     run: echo "IMAGE_TAG=test-${GITHUB_SHA::7}" >> $GITHUB_ENV

   - name: Buid docker image
     run: |
       docker build -t myapp:$IMAGE_TAG .

   - name: Get current time # A step to get the current time so we can use it in release name
     uses: josStorer/get-current-time@v2
     id: current-time
     with:
       timezone: "Asia/Hong_Kong"

   - name: Set tag   # To give dynamic tags using the current date and time.
     id: vars
     run: echo ::set-output name=tag::$(date +'%Y-%m-%d-%H-%M-%S')

   - name: Extract branch name  # A step to extract only branch name from github_ref
     shell: bash
     run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
     id: extract_branch

   - name: Export for UAT/Prod # A step to tag and export (as a tar file) the docker image
     run: |
        docker tag myapp:$IMAGE_TAG new-app:latest
        docker save new-app:latest -o Release.tar

   - name: Create Release # A step to create a new Release in Github
     id: create_release
     uses: actions/create-release@v1
     env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
     with:
       tag_name: ${{ steps.extract_branch.outputs.branch }}-${{ steps.vars.outputs.tag }}
       release_name: Release ${{ steps.extract_branch.outputs.branch }} ${{ steps.current-time.outputs.time }}
       body: |
         ${{ github.ref }}
       draft: false
       prerelease: true

   - name: Upload Release Asset # A step to upload the Tar file to the previously created Release
     id: upload-release-asset 
     uses: actions/upload-release-asset@v1
     env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     with:
       upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
       asset_path: Release.tar
       asset_name: Release.tar
       asset_content_type: application/x-tar

       
